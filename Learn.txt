1. Installation
https://nuxt.com/docs/getting-started/installation
$ npx nuxi@latest init <project-name>

by default folllowing files and folder are avaibalbe
a .nuxt folder
b. public folder
c. server folder
d. app.vue //main app page

when our project start, we see content from app.vue
//in app.vue //see https://nuxt.com/docs/getting-started/views
<template>
  <div>
    <NuxtRouteAnnouncer />//The <NuxtRouteAnnouncer> component adds a hidden element with the page title to announce route changes to assistive technologies.
    <NuxtWelcome /> //this is welcome component from nuxt
  </div>
</template>

see: https://nuxt.com/docs/api/components/nuxt-route-announcer

2.pages directory (routing)
->Create a pages folder, everything inside it works a routes
//pages/index.vue

NOTE: 
->by default nuxt ma app.vue ko content show hunxa in url http://localhost:3000, 
->but if we want to show our won page from pages/index.vue in url http://localhost:300, then delete app.vue 

pages vitra about.vue,contact.vue page create garne but when we hit http://localhost:3000/about, http://localhost:3000/contact page will not render becoz we need to add  <NuxtPage /> in our main app.vue

//app.vue

<template>
<div>
    <NuxtPage /> //yesle pages vitra ko route haru show garxa works same as  <router-view></router-view>
</div>
</template>

<script setup></script>

//pages
->index.vue //url: http://localhost:3000
->about.vue //http://localhost:3000/about
->contact.vue //http://localhost:3000/contact


3.Layouts:
->Layouts are wrappers around pages that contain a common User Interface for several pages, such as a header and footer display. 
->Layouts are Vue files using <slot /> components to display the page content. 
->The layouts/default.vue file will be used by default. Custom layouts can be set as part of your page metadata.

Create layouts/default.vue file
//layouts/default.vue
<template>
    <div>
      <AppHeader /> //this is header component
      <slot />
      <AppFooter /> //footer component
    </div>
  </template>

  Now wrapp  <NuxtPage /> with <NuxtLayout> in app.vue
  //app.vue
<template>
<div>
    <NuxtLayout>
    <NuxtPage /> //now pages vitra ko harek route ma yo layout apply hunxa
    </NuxtLayout>
</div>
</template>

<script setup></script>

NOTE:  <NuxtLayout> le by default layouts/default.vue ma vako layout linxa, if we want to create custom layout then create "custom.vue"
//in layouts/custom.vue
<template>
  <div>
    <CustomAppHeader/>
    <slot />
    <CustomAppFooter/>
  </div>
</template>

<script lang="ts" setup>

</script>

<style>

</style>

Now lets apply this custom layout in about page

//pages/about.vue
<template>
  <div>about page</div>
</template>

<script setup lang="ts">
definePageMeta({
  layout: "custom", //this will apply custom layout instead of default.vue
});
</script>

<style></style>

NOTE: we can directly override default layout for all pages
//app.vue
<script setup lang="ts">
// You might choose this based on an API call or logged-in status
const layout = "custom";
</script>

<template>
  <NuxtLayout :name="layout">
    <NuxtPage />
  </NuxtLayout>
</template>


Nested pages
->suppose we have pages/auth/login.vue then url will be http://localhost:3000/auth/login
pages/post/[id].vue  //http://localhost:3000/post/1
in [id].vue
<template>
  <div>
    this is post details with id {{$route.params.id}} //id becoz page name is [id].vue, if page name is [slug].vue then {{$route.params.slug}}
  </div>
</template>

<script lang="ts" setup>
const route = useRoute();
console.log(route.params.id)
</script>



->If you have a layout in nested directories, the layout's name will be based on its own path directory and filename, with duplicate segments being removed.
File	Layout Name
~/layouts/desktop/default.vue	     desktop-default
~/layouts/desktop-base/base.vue	   desktop-base
~/layouts/desktop/index.vue	       desktop
For clarity, we recommend that the layout's filename matches its name:
File	Layout Name
~/layouts/desktop/DesktopDefault.vue	desktop-default
~/layouts/desktop-base/DesktopBase.vue	desktop-base
~/layouts/desktop/Desktop.vue	desktop


4.components directory:
->Nuxt automatically imports any components in this directory (along with components that are registered by any modules you may be using).

components/
--| AppHeader.vue
--| AppFooter.vue
//app.vue
<template>
  <div>
    <AppHeader />//components directory bata automatic import hunxa
    <NuxtPage />
    <AppFooter />
  </div>
</template>


For Nested Components directory

components/
--| base/
----| Button.vue

->means components folder vitra base sub folder vitra Button.vue file xa vane its name will be "BaseButton"

//in aboout.vue
<template>
  <div>about page</div>
  <div>
  <BaseButton/>//nested folder vitra vako component yesari use garne

  </div>
</template>



4. assets directory
->The directory usually contains the following types of files:
a.Stylesheets (CSS, SASS, etc.)
b.Fonts
c. Images that won't be served from the public/ directory.




->Nuxt uses two directories to handle assets like stylesheets, fonts or images.
a.The public/ directory content is served at the server root as-is.
b.The assets/ directory contains by convention every asset that you want the build tool (Vite or webpack) to process.

Public Directory
The public/ directory is used as a public server for static assets publicly available at a defined URL of your application.

You can get a file in the public/ directory from your application's code or from a browser by the root URL /.
For example, referencing an image file in the public/img/ directory, available at the static URL /img/nuxt.png:

<template>
  <img src="/img/nuxt.png" alt="Discover Nuxt 3" />
</template>

Assets Directory:

->Nuxt uses Vite (default) or webpack to build and bundle your application. 
->The main function of these build tools is to process JavaScript files, but they can be extended through plugins (for Vite) or loaders (for webpack) to process other kind of assets, like stylesheets, fonts or SVG. This step transforms the original file mainly for performance or caching purposes (such as stylesheets minification or browser cache invalidation).
->By convention, Nuxt uses the assets/ directory to store these files but there is no auto-scan functionality for this directory, and you can use any other name for it.

In your application's code, you can reference a file located in the assets/ directory by using the ~/assets/ path.

<template>
  <img src="~/assets/img/nuxt.png" alt="Discover Nuxt 3" />
</template>

Conslusion: assets directory le performance ramro hunxa,
->public directiory ko image cache hudena
->public directory ko file direct url bata access hunxa .ie http://localhost:3000/images/profile.jpeg browser ma dekhinxa which can be insecure


Global Styles Imports
->To globally insert statements in your Nuxt components styles, you can use the Vite option at your nuxt.config file.



->create main.scss file in assets folder

//nuxt.config.ts

import {resolve} from 'path'

export default defineNuxtConfig({
  compatibilityDate: '2024-04-03',
  devtools: { enabled: true },
  alias:{
    "@":resolve(__dirname,"/")
  },
  css:["~/assets/main.scss"]//scss load gareko app ma
})

//in main.scss
body{
  background:pink;
}

now to use scss, saas, we need to install saas
$ npm install -D sass or yarn add -D sass

Install Tailwindcss: https://tailwindcss.com/docs/guides/nuxtjs#standard
$ npm install -D tailwindcss postcss autoprefixer
$ npx tailwindcss init

add following in nuxt.config.ts
  postcss: {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  },

add following in  tailwind.config.JavaScript
  content: [
    "./components/**/*.{js,vue,ts}", //nuxt ko components folder watch gareko
    "./layouts/**/*.vue",
    "./pages/**/*.vue",
    "./plugins/**/*.{js,ts}",
    "./app.vue",//nuxt ko app.vue files watch gareko
    "./error.vue",
  ],


add following in main.scss
@tailwind base;
@tailwind components;
@tailwind utilities;


6. Use SVG icons in nuxt
https://www.npmjs.com/package/vite-svg-loader
we need vite-svg-loader to load svg icons

try to use icons component for faster load 
go to https://icones.js.org/
copy any icons eg bell

create icons/Bell.vue
//Bell.vue

<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M12 18.5q.625 0 1.063-.437T13.5 17h-3q0 .625.438 1.063T12 18.5M7 16h10v-2h-1v-2.6q0-1.525-.788-2.787T13 7V5.5h-2V7q-1.425.35-2.212 1.613T8 11.4V14H7zm5 6q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
</template>

<script>
export default {
  name: 'MaterialSymbolsCircleNotificationsSharp'
}
</script>


now use this component anywhere as <IconsBell/>


7.composables directory:https://nuxt.com/docs/guide/directory-structure/composables
->a composable is a function that leverages Vue's Composition API to encapsulate and reuse stateful logic in a modular and reusable way.
When to Use Composables

a. When you want to extract and reuse stateful logic across multiple components.
b. When your components are getting too large and you want to break down their functionality into smaller, manageable pieces.
c. When you need to share logic between components that are not related in a component hierarchy.


create composables/useCounter.ts
export const useCounter = () => {
  const count = ref(0);

  function increment() {
    count.value++;
  }

  function decrement() {
    count.value--;
  }

  return {
    count,
    increment,
    decrement,
  };
};

now it can be use in any components

//Counter.vue

<template>
<div>
    <p>Count: {{ count }}</p>
    <button @click="increment" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Increment</button>
    <button  @click="decrement" type="button" class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">Decrement</button>
  
  </div>
</template>

<script lang="ts" setup>
const { count, increment, decrement } = useCounter();
</script>

<style>

</style>

NOTE: we have composables libray in vuejs, we can use them for faster development
->https://vueuse.org/guide/


8.plugins directory :https://nuxt.com/docs/guide/directory-structure/plugins
->Nuxt automatically reads the files in the plugins/ directory and loads them at the creation of the Vue application.

->plugins directory ma vako files haru initally nai read and load hunxa
eg. 
step1. create plugins/myPlugin.ts
export default defineNuxtPlugin((nuxtApp) => {

    console.log({nuxtApp})//NUxt app start huda yo suru mai read hunxa

})

step2.Step 2: Register the Plugin
->In nuxt.config.ts, Nuxt automatically registers plugins located in the plugins directory, so no need to manually add it:
->subdirectory ma vako plugins chai register garnu parxa

eg. 
-| plugins/
---| foo.ts      // scanned
---| bar/
-----| baz.ts    // not scanned
-----| foz.vue   // not scanned
-----| index.ts  // currently scanned but deprecated

To add plugins in subdirectories, you can use the plugins option in nuxt.config.ts:
//nuxt.config.ts
export default defineNuxtConfig({
  plugins: [
    '~/plugins/bar/baz',
    '~/plugins/bar/foz'
  ]
})


9. middleware directory  : https://nuxt.com/docs/guide/directory-structure/middleware

->named route middleware, placed in the middleware/ and automatically loaded via asynchronous import when used on a page.
->global route middleware, placed in the middleware/ with a .global suffix and is run on every route change.

a.named route middleware
create a file middleware/auth.ts
//auth.ts
export default defineNuxtRouteMiddleware((to, from) => {

    console.log({from,to})

})

now apply this middleware to pages/contact-us.vue

<script setup lang="ts">
definePageMeta({
  middleware: ["auth"]
  
})
</script>

//pages/contact-us.vue
<template>
  <div>
    contact page
  </div>
</template>

<script setup lang="ts">
definePageMeta({
  middleware: ["auth"] //this middleware will apply on this contact-us page only
  
})
</script>

<style>

</style>


b. For applying middlware to all pages
create middleware/auth.global.ts
//auth.global.ts
export default defineNuxtRouteMiddleware((to, from) => {

    if (to.params.id === '1') {
        return abortNavigation()
      }

    console.log({from,to})

})

now this middleware will automatically applied to all routes/pages

Middleware Order
->Middleware runs in the following order:
1.Global Middleware
2.Page defined middleware order (if there are multiple middleware declared with the array syntax)

.ie. paila global middlware run hunxa then only page ma define vako run hunxa



10. modules directory
->Use the modules/ directory to automatically register local modules within your application
->The auto-registered files patterns are:
modules/*/index.ts
modules/*.ts

->You don't need to add those local modules to your nuxt.config.ts separately.

but if we install thrid party modules, then we need to register on nuxt.config.ts
suppose we install module from https://content.nuxt.com/get-started/installation
to use this module,we need to register in nuxt.config.ts
export default defineNuxtConfig({
  modules: [
    '@nuxt/content'
  ],
  
})

npx nuxi@latest module add pinia   then we need to add
 modules: [
    // ...
    '@pinia/nuxt',
  ],


11.State Management : https://nuxt.com/docs/getting-started/state-management
->Nuxt provides the useState composable to create a reactive and SSR-friendly shared state across components.
->useState is an SSR-friendly "ref" replacement. Its value will be preserved after server-side rendering (during client-side hydration) and shared across all components using a unique key.

so reactive property define garna "ref" vanda useState() use garne

const counter = useState('counter', () => 0)//defining counter reactive property

Example:
<template>
  <div>
    <button @click="increment">Increment</button>
    <p>Counter: {{ counter }}</p>
  </div>
</template>

<script setup>
import { useState } from '#app' // Importing useState from Nuxt

// Using useState to create a reactive state
const counter = useState('counter', () => 0)

// Method to increment the counter
const increment = () => {
  counter.value++
}
</script>

Now: statemanagement ko lagi either vuex or pinia use garna sakinxa, but nuxt recrommend to use useState()

We have code in pinia
export const useCounterStore = defineStore('counter', {
  state: () => ({
    counter: 0,
    name:"bikash",
    skills:['php','laravel']
  }),
  actions: {
    increment() {
      this.counter++
    }
  }
})

using useState()

<!-- ExampleComponent.vue -->
<template>
  <div>
    <p>Counter: {{ counter }}</p>
    <p>Name: {{ name }}</p>
    <p>Skills: {{ skills.join(', ') }}</p>
    <button @click="increment">Increment</button>
  </div>
</template>

<script setup>
import { useState } from '#app'

// Define each state property using useState
const counter = useState('counter', () => 0)
const name = useState('name', () => 'bikash')
const skills = useState('skills', () => ['php', 'laravel'])

// Actions can be simple functions or methods defined in the script setup
const increment = () => {
  counter.value++
}
</script>

NOTE: complex and big application ma use pinia, for small projects useState() is better


11. Pinia
->pinia is a store library for Vue, 
->it allows you to share a state across components/pages. 
->If you are familiar with the Composition API, you might be thinking you can already share a global state with a simple export const state = reactive({}). 

$ npx nuxi@latest module add pinia

We supply a module to handle everything for you, you only need to add it to modules in your nuxt.config.js file:


// nuxt.config.js
export default defineNuxtConfig({
  // ... other options
  modules: [
    // ...
    '@pinia/nuxt',
  ],
})

What is a Store?
->A Store (like Pinia) is an entity holding state and business logic that isn't bound to your Component tree. 
->In other words, it hosts global state.
->It has three concepts, the state, getters and actions

you can think
a. state as data() property
b. getters as computed() property
c. actions as method()

create stores/useCounterStore.ts
export const useCounterStore = defineStore('counter', {
  state: () => ({ count: 0, name: 'Eduardo' }),
  getters: {
    doubleCount: (state) => state.count * 2,
  },
  actions: {
    increment() {
      this.count++
    },
  },
})

In Setup Stores:

ref()s become state properties
computed()s become getters
function()s become actions


12.server directory :: nuxt3 ma api ni banauna milxa that act as backend
->The server/ directory is used to register API and server handlers to your application.
->Nuxt automatically scans files inside these directories to register API and server handlers with Hot Module Replacement (HMR) support.

Directory structure

-| server/
---| api/
-----| hello.ts      # /api/hello
---| routes/
-----| bonjour.ts    # /bonjour
---| middleware/
-----| log.ts        # log all requests

->Each file should export a default function defined with defineEventHandler() or eventHandler() (alias).
->The handler can directly return JSON data, a Promise, or use event.node.res.end() to send a response.

lets create post api
create server/api/post.ts

export default defineEventHandler(async (event) => {
  return [
    {
      id: 1,
      title: "His mother had always taught him",
      body: "His mother had always taught him not to ever think of himself as better than others. He'd tried to live by this motto. He never looked down on those who were less fortunate or who had less money than him. But the stupidity of the group of people he was talking to made him change his mind.",
      tags: ["history", "american", "crime"],
      reactions: {
        likes: 192,
        dislikes: 25,
      },
      views: 305,
      userId: 121,
    },
    {
      id: 2,
      title: "His mother had always taught him 2",
      body: "His mother had always taught him not to ever think of himself as better than others. He'd tried to live by this motto. He never looked down on those who were less fortunate or who had less money than him. But the stupidity of the group of people he was talking to made him change his mind 2.",
      tags: ["history2", "american2", "crime2"],
      reactions: {
        likes: 100,
        dislikes: 30,
      },
      views: 300,
      userId: 120,
    },
  ];
});

now call this api inside pages/posts/index.vue
<script lang="ts" setup>
const { data, pending, error, refresh } = await useFetch('/api/post')

console.log(data.value)

</script>


Server Routes:
->Files inside the ~/server/api are automatically prefixed with /api in their route.
->To add server routes without /api prefix, put them into ~/server/routes directory.

//server/routes/hello.ts
export default defineEventHandler(() => 'Hello World!')


Server Middleware:
->Nuxt will automatically read in any file in the ~/server/middleware to create server middleware for your project.
->Middleware handlers will run on every request before any other server route to add or check headers, log requests, or extend the event's request object.

//server/middleware/auth.ts

export default defineEventHandler((event) => {
  event.context.auth = { user: 123 }
  console.log('New request: ' + getRequestURL(event))
})

NOTE:api haru nodejs kai hunxa



13.Nitro  : https://nitro.unjs.io/guide
what is nitro in nuxt?
->Nitro is a server engine used in Nuxt 3 that provides a powerful, universal, and flexible backend for rendering and server-side capabilities

Key Features of Nitro
a. Server-Side Rendering (SSR) and Static-Site Generation (SSG):

b.API Routes:
->Nitro supports API routes directly within the Nuxt 3 framework. 
->You can create server-side API endpoints that run alongside your Nuxt application, eliminating the need for a separate backend server. 
->These API routes are also fully compatible with serverless environments.

c.Built-in Server Middleware:
->Nitro allows you to define middleware that runs before rendering or handling API requests. 
->This is useful for authentication, logging, error handling, and more.




14. Rendering Modes
->In Nuxt 3, there are different rendering modes that determine how your application is rendered and served to the client. 
->The rendering modes available in Nuxt 3 are:

a. Server-Side Rendering (SSR):
->In SSR mode, the HTML is rendered on the server for every request. 
->This improves SEO and provides a faster first contentful paint (FCP) since the server sends a fully rendered page to the client.
->This mode is suitable for applications that require real-time data fetching and need better SEO optimization.

//nuxt.config.ts
export default defineNuxtConfig({
  ssr: true, // Set to 'false' for SPA mode, 'true' for SSR
  target: 'server', // Use 'static' for static generation
})


b.Static Site Generation (SSG):
->Also known as "pre-rendering" or "full static," SSG allows you to generate the HTML of your pages at build time.
->The generated static files are then served to the clients.
->This mode is best for content-heavy websites that don’t change often, such as blogs or documentation sites. (change nahune static page haru ko lagi better hunxa)
->It offers excellent performance and can be served from a CDN.

c.Client-Side Rendering (CSR) OR  Single Page Application - SPA Mode:
->In CSR mode, the JavaScript is loaded first, and the HTML is generated on the client side. 
->this mode is ideal for applications where SEO is not a primary concern and you want to leverage the benefits of a JavaScript-based client-side application.

export default defineNuxtConfig({
  ssr: false, 

})


d.Hybrid Rendering (Partial Static/ISR):
->Nuxt 3 also supports hybrid rendering, allowing you to mix and match SSR and SSG. You can statically generate some parts of your application and use SSR for others.

1. Example of Server-Side Rendering (SSR) Mode
->Server-Side Rendering (SSR) means that the Nuxt server generates the HTML of the page on each request. 
->Configuration for SSR in nuxt.config.ts
// nuxt.config.ts
export default defineNuxtConfig({
  ssr: true, // Enable SSR mode
  target: 'server', // Ensure the target is set to 'server' for SSR
  // Other configurations...
})

Example Page in SSR Mode

<!-- pages/index.vue -->
<template>
  <div>
    <h1>SSR Example Page</h1>
    <ul>
      <li v-for="post in posts" :key="post.id">{{ post.title }}</li>
    </ul>
  </div>
</template>

<script setup lang="ts">
// Fetch data on the server-side
const { data: posts } = await useFetch('https://jsonplaceholder.typicode.com/posts')
</script>
->The useFetch hook is used to fetch data from an external API.
->Since ssr is set to true, this data fetching happens on the server for the initial request, and the fully rendered HTML is sent to the client.


2. Example of Static Site Generation (SSG) Mode
->also known as full static mode, generates static HTML files at build time for each route. These files are then served to clients, which can improve performance and reduce server load.
->To enable SSG in Nuxt 3, set the ssr property to true and the target property to 'static':

// nuxt.config.ts
export default defineNuxtConfig({
  ssr: true, // SSR must be enabled for SSG
  target: 'static', // Enable SSG mode
  // Other configurations...
})

Example Page in SSG Mode
<!-- pages/index.vue -->
<template>
  <div>
    <h1>SSG Example Page</h1>
    <ul>
      <li v-for="post in posts" :key="post.id">{{ post.title }}</li>
    </ul>
  </div>
</template>

<script setup lang="ts">
// Fetch data at build time
const { data: posts } = await useFetch('https://jsonplaceholder.typicode.com/posts')
</script>

How to Generate Static Files

$ npm run build
$ npm run generate

The generate command will create a dist folder containing all the static HTML files. These can be deployed to any static hosting service (like Netlify, Vercel, or GitHub Pages).


How to check pages is rendered SSR/SSG or not
a. Inspecting the Network Panel (page lai inspect garera network tab ma jane)
b. fetch/xhr ko side ma Doc lai click garne
p. Check the document Request: page refresh garda tyo page ko url hit hunxa and response ma herne
->If you see fully rendered HTML in the response, it indicates that the server provided a pre-rendered page. This means it could be SSR or SSG.



15. usefetch()  : https://nuxt.com/docs/api/composables/use-fetch
->useFetch is a composable meant to be called directly in a setup function, plugin, or route middleware. It returns reactive composables and handles adding responses to the Nuxt payload so they can be passed from server to client without re-fetching the data on client side when the page hydrates.

Usage:
const { data, status, error, refresh, clear } = await useFetch('/api/modules', {
  pick: ['title']
})

console.log(data.value)

Using the query option, you can add search parameters to your query.

const param1 = ref('value1')
const { data, status, error, refresh } = await useFetch('/api/modules', {
  query: { param1, param2: 'value2' }
})

The above example results in https://api.nuxt.com/modules?param1=value1&param2=value2.



16. SEO and Meta
->Out-of-the-box, Nuxt provides sensible defaults, which you can override if needed.

export default defineNuxtConfig({
  app: {
    head: {
      charset: 'utf-8',
      viewport: 'width=device-width, initial-scale=1',
      title:'My Nuxt App'
    }
  },
})

a.useHead
->The useHead composable function allows you to manage your head tags programmatically and reactively,

//app.vue
<script setup lang="ts">
useHead({
  title: 'My App',
  meta: [
    { name: 'description', content: 'My amazing site.' }
  ],
  bodyAttrs: {
    class: 'test'
  },
  script: [ { innerHTML: 'console.log(\'Hello world\')' } ]
})
</script>

Components
->Nuxt provides <Title>, <Base>, <NoScript>, <Style>, <Meta>, <Link>, <Body>, <Html> and <Head> components so that you can interact directly with your metadata within your component's template.

//pages/posts/index.vue
  <Head> //head section ma halxa
    <Title>Blog List</Title>
    <Meta name="description" content="this is blog list" />
  </Head>


  17.Hooks
  ->hooks provide a powerful way to interact with the Nuxt lifecycle and extend its functionality. They allow you to execute custom logic at various stages of the build, server, and runtime processes.


  1. Server-Side Hooks
  ->Server-side hooks allow you to run code on the server side during specific parts of the Nuxt lifecycle. Here are a few examples:

  "nitro:build:before": This hook runs before the Nitro build process starts. It can be useful for modifying the Nitro configuration or setting up custom build tasks.

  export default defineNuxtConfig({
  hooks: {
    'nitro:build:before'(nitro) {
      // Custom logic before Nitro build
      console.log('Before Nitro build');
    }
  }
});


18. Nuxt Configuration
->The "nuxt.config.ts" file is located at the root of a Nuxt project and can override or extend the application's behavior.

export default defineNuxtConfig({
  // My Nuxt config
})

Environment Variables and Private Tokens

->The runtimeConfig API exposes values like environment variables to the rest of your application. By default, these keys are only available server-side. 
->The keys within runtimeConfig.public are also available client-side.

export default defineNuxtConfig({
  runtimeConfig: {
    // The private keys which are only available server-side .ie server folder vitra 
    apiSecret: '123',
    // Keys within public are also exposed client-side
    public: {
      apiBase: '/api'
    }
  }
})

->These variables are exposed to the rest of your application using the useRuntimeConfig() composable.
<script setup lang="ts">
const runtimeConfig = useRuntimeConfig()
</script>

a. Server-Side Access: (server folder vitra run hune files haru like apis, middlware etc)
->To access the apiSecret on the server side, you can use the useRuntimeConfig() function within server-side contexts such as API routes, plugins, or middleware.

eg.server/api/auth.ts
export default defineEventHandler((event) => {
  const config = useRuntimeConfig();
  
  // Access the private apiSecret key (server-side only)
  const secret = config.apiSecret;
  console.log({secret}) //server side access
  
  // Do something with the secret, like making a server-side API call
  return {
    message: `Server-side secret: ${secret}`
  };
});

b. Client-Side Access: (server folder bahek harek pages vue files haru ma access)

//app.vue

<template>
  <div>
    <p>API Base URL: {{ apiBase }}</p>
  </div>
</template>

<script setup>


// Access public configuration
const config = useRuntimeConfig();
const apiBase = config.public.apiBase;

// Use apiBase for making client-side API calls or displaying information
</script>

NOTE: server side ma console gareko browser ma show hudena, u can see in terminal