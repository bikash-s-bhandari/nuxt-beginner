1. Installation
https://nuxt.com/docs/getting-started/installation
$ npx nuxi@latest init <project-name>

by default folllowing files and folder are avaibalbe
a .nuxt folder
b. public folder
c. server folder
d. app.vue //main app page

when our project start, we see content from app.vue
//in app.vue //see https://nuxt.com/docs/getting-started/views
<template>
  <div>
    <NuxtRouteAnnouncer />//The <NuxtRouteAnnouncer> component adds a hidden element with the page title to announce route changes to assistive technologies.
    <NuxtWelcome /> //this is welcome component from nuxt
  </div>
</template>

see: https://nuxt.com/docs/api/components/nuxt-route-announcer

2.pages directory (routing)
->Create a pages folder, everything inside it works a routes
//pages/index.vue

NOTE: 
->by default nuxt ma app.vue ko content show hunxa in url http://localhost:3000, 
->but if we want to show our won page from pages/index.vue in url http://localhost:300, then delete app.vue 

pages vitra about.vue,contact.vue page create garne but when we hit http://localhost:3000/about, http://localhost:3000/contact page will not render becoz we need to add  <NuxtPage /> in our main app.vue

//app.vue

<template>
<div>
    <NuxtPage /> //yesle pages vitra ko route haru show garxa works same as  <router-view></router-view>
</div>
</template>

<script setup></script>

//pages
->index.vue //url: http://localhost:3000
->about.vue //http://localhost:3000/about
->contact.vue //http://localhost:3000/contact


3.Layouts:
->Layouts are wrappers around pages that contain a common User Interface for several pages, such as a header and footer display. 
->Layouts are Vue files using <slot /> components to display the page content. 
->The layouts/default.vue file will be used by default. Custom layouts can be set as part of your page metadata.

Create layouts/default.vue file
//layouts/default.vue
<template>
    <div>
      <AppHeader /> //this is header component
      <slot />
      <AppFooter /> //footer component
    </div>
  </template>

  Now wrapp  <NuxtPage /> with <NuxtLayout> in app.vue
  //app.vue
<template>
<div>
    <NuxtLayout>
    <NuxtPage /> //now pages vitra ko harek route ma yo layout apply hunxa
    </NuxtLayout>
</div>
</template>

<script setup></script>

NOTE:  <NuxtLayout> le by default layouts/default.vue ma vako layout linxa, if we want to create custom layout then create "custom.vue"
//in layouts/custom.vue
<template>
  <div>
    <CustomAppHeader/>
    <slot />
    <CustomAppFooter/>
  </div>
</template>

<script lang="ts" setup>

</script>

<style>

</style>

Now lets apply this custom layout in about page

//pages/about.vue
<template>
  <div>about page</div>
</template>

<script setup lang="ts">
definePageMeta({
  layout: "custom", //this will apply custom layout instead of default.vue
});
</script>

<style></style>

NOTE: we can directly override default layout for all pages
//app.vue
<script setup lang="ts">
// You might choose this based on an API call or logged-in status
const layout = "custom";
</script>

<template>
  <NuxtLayout :name="layout">
    <NuxtPage />
  </NuxtLayout>
</template>


Nested pages
->suppose we have pages/auth/login.vue then url will be http://localhost:3000/auth/login
pages/post/[id].vue  //http://localhost:3000/post/1
in [id].vue
<template>
  <div>
    this is post details with id {{$route.params.id}} //id becoz page name is [id].vue, if page name is [slug].vue then {{$route.params.slug}}
  </div>
</template>

<script lang="ts" setup>
const route = useRoute();
console.log(route.params.id)
</script>



->If you have a layout in nested directories, the layout's name will be based on its own path directory and filename, with duplicate segments being removed.
File	Layout Name
~/layouts/desktop/default.vue	     desktop-default
~/layouts/desktop-base/base.vue	   desktop-base
~/layouts/desktop/index.vue	       desktop
For clarity, we recommend that the layout's filename matches its name:
File	Layout Name
~/layouts/desktop/DesktopDefault.vue	desktop-default
~/layouts/desktop-base/DesktopBase.vue	desktop-base
~/layouts/desktop/Desktop.vue	desktop


4.components directory:
->Nuxt automatically imports any components in this directory (along with components that are registered by any modules you may be using).

components/
--| AppHeader.vue
--| AppFooter.vue
//app.vue
<template>
  <div>
    <AppHeader />//components directory bata automatic import hunxa
    <NuxtPage />
    <AppFooter />
  </div>
</template>


For Nested Components directory

components/
--| base/
----| Button.vue

->means components folder vitra base sub folder vitra Button.vue file xa vane its name will be "BaseButton"

//in aboout.vue
<template>
  <div>about page</div>
  <div>
  <BaseButton/>//nested folder vitra vako component yesari use garne

  </div>
</template>



4. assets directory
->The directory usually contains the following types of files:
a.Stylesheets (CSS, SASS, etc.)
b.Fonts
c. Images that won't be served from the public/ directory.




->Nuxt uses two directories to handle assets like stylesheets, fonts or images.
a.The public/ directory content is served at the server root as-is.
b.The assets/ directory contains by convention every asset that you want the build tool (Vite or webpack) to process.

Public Directory
The public/ directory is used as a public server for static assets publicly available at a defined URL of your application.

You can get a file in the public/ directory from your application's code or from a browser by the root URL /.
For example, referencing an image file in the public/img/ directory, available at the static URL /img/nuxt.png:

<template>
  <img src="/img/nuxt.png" alt="Discover Nuxt 3" />
</template>

Assets Directory:

->Nuxt uses Vite (default) or webpack to build and bundle your application. 
->The main function of these build tools is to process JavaScript files, but they can be extended through plugins (for Vite) or loaders (for webpack) to process other kind of assets, like stylesheets, fonts or SVG. This step transforms the original file mainly for performance or caching purposes (such as stylesheets minification or browser cache invalidation).
->By convention, Nuxt uses the assets/ directory to store these files but there is no auto-scan functionality for this directory, and you can use any other name for it.

In your application's code, you can reference a file located in the assets/ directory by using the ~/assets/ path.

<template>
  <img src="~/assets/img/nuxt.png" alt="Discover Nuxt 3" />
</template>

Conslusion: assets directory le performance ramro hunxa,
->public directiory ko image cache hudena
->public directory ko file direct url bata access hunxa .ie http://localhost:3000/images/profile.jpeg browser ma dekhinxa which can be insecure


Global Styles Imports
->To globally insert statements in your Nuxt components styles, you can use the Vite option at your nuxt.config file.



->create main.scss file in assets folder

//nuxt.config.ts

import {resolve} from 'path'

export default defineNuxtConfig({
  compatibilityDate: '2024-04-03',
  devtools: { enabled: true },
  alias:{
    "@":resolve(__dirname,"/")
  },
  css:["~/assets/main.scss"]//scss load gareko app ma
})

//in main.scss
body{
  background:pink;
}

now to use scss, saas, we need to install saas
$ npm install -D sass or yarn add -D sass

Install Tailwindcss: https://tailwindcss.com/docs/guides/nuxtjs#standard
$ npm install -D tailwindcss postcss autoprefixer
$ npx tailwindcss init

add following in nuxt.config.ts
  postcss: {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  },

add following in  tailwind.config.JavaScript
  content: [
    "./components/**/*.{js,vue,ts}", //nuxt ko components folder watch gareko
    "./layouts/**/*.vue",
    "./pages/**/*.vue",
    "./plugins/**/*.{js,ts}",
    "./app.vue",//nuxt ko app.vue files watch gareko
    "./error.vue",
  ],


add following in main.scss
@tailwind base;
@tailwind components;
@tailwind utilities;


6. Use SVG icons in nuxt
https://www.npmjs.com/package/vite-svg-loader
we need vite-svg-loader to load svg icons

try to use icons component for faster load 
go to https://icones.js.org/
copy any icons eg bell

create icons/Bell.vue
//Bell.vue

<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M12 18.5q.625 0 1.063-.437T13.5 17h-3q0 .625.438 1.063T12 18.5M7 16h10v-2h-1v-2.6q0-1.525-.788-2.787T13 7V5.5h-2V7q-1.425.35-2.212 1.613T8 11.4V14H7zm5 6q-2.075 0-3.9-.788t-3.175-2.137T2.788 15.9T2 12t.788-3.9t2.137-3.175T8.1 2.788T12 2t3.9.788t3.175 2.137T21.213 8.1T22 12t-.788 3.9t-2.137 3.175t-3.175 2.138T12 22"></path></svg>
</template>

<script>
export default {
  name: 'MaterialSymbolsCircleNotificationsSharp'
}
</script>


now use this component anywhere as <IconsBell/>


7.composables directory:https://nuxt.com/docs/guide/directory-structure/composables
->a composable is a function that leverages Vue's Composition API to encapsulate and reuse stateful logic in a modular and reusable way.
When to Use Composables

a. When you want to extract and reuse stateful logic across multiple components.
b. When your components are getting too large and you want to break down their functionality into smaller, manageable pieces.
c. When you need to share logic between components that are not related in a component hierarchy.


create composables/useCounter.ts
export const useCounter = () => {
  const count = ref(0);

  function increment() {
    count.value++;
  }

  function decrement() {
    count.value--;
  }

  return {
    count,
    increment,
    decrement,
  };
};

now it can be use in any components

//Counter.vue

<template>
<div>
    <p>Count: {{ count }}</p>
    <button @click="increment" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Increment</button>
    <button  @click="decrement" type="button" class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">Decrement</button>
  
  </div>
</template>

<script lang="ts" setup>
const { count, increment, decrement } = useCounter();
</script>

<style>

</style>

NOTE: we have composables libray in vuejs, we can use them for faster development
->https://vueuse.org/guide/


8.plugins directory :https://nuxt.com/docs/guide/directory-structure/plugins
->Nuxt automatically reads the files in the plugins/ directory and loads them at the creation of the Vue application.

->plugins directory ma vako files haru initally nai read and load hunxa
eg. 
step1. create plugins/myPlugin.ts
export default defineNuxtPlugin((nuxtApp) => {

    console.log({nuxtApp})//NUxt app start huda yo suru mai read hunxa

})

step2.Step 2: Register the Plugin
->In nuxt.config.ts, Nuxt automatically registers plugins located in the plugins directory, so no need to manually add it:
->subdirectory ma vako plugins chai register garnu parxa

eg. 
-| plugins/
---| foo.ts      // scanned
---| bar/
-----| baz.ts    // not scanned
-----| foz.vue   // not scanned
-----| index.ts  // currently scanned but deprecated

To add plugins in subdirectories, you can use the plugins option in nuxt.config.ts:
//nuxt.config.ts
export default defineNuxtConfig({
  plugins: [
    '~/plugins/bar/baz',
    '~/plugins/bar/foz'
  ]
})


9. middleware directory